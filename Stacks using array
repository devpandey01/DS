/*
Stacks using array

Stack is called LIFO data structure where element that is inserted last is first taken out
Each stack has a variable TOP which points to the address where the element will be added or deleted from the stack
Also there is a variable MAX which is the maximum size of array
During the push,pop function we check if the stack is full/empty. If full (TOP == MAX-1), we say stack overflow (no more elements can be added). 
If empty(TOP==-1), we say stack underflow (no elements in the stack). 
As stack follows LIFO, we display last inserted element first using for loop
*/

#include<stdio.h>
#include<stdlib.h>
#define SIZE 50

int A[SIZE]; //array declaration
int x=-1;
int i,val,choice;
int top=-1; //points to topmost element of the stack

//Push function - used to add element to the stack 
void push(int val){
    if(top==SIZE-1){
        printf("Stack is full\n");
    }
    else{
        top++;
        A[top]=val;
    }
}

//Pop function - Used to remove topmost element from the stack
int pop(){
    if(top==-1){
        printf("Stack is empty\n");
    }
    else{
        x=A[top];
        top--;
        printf("%d is popped\n",x);
    }
}

//Peek function - displays the topmost element of the stack
void peek(){
    if(top==-1){
        printf("Stack is empty\n");
    }
    else{
        printf("The topmost element of the stack is: %d\n",A[top]);
    }
}

//Display function - displays the elements of the stack
void display(){
    if(top==-1){
        printf("Stack is empty\n");
    }
    else{
        for(i=top;i>=0;i--){
            printf("%d ",A[i]);
        }
    printf("\n");
    }
}

//Menu driven code using while loop
void main(){
    while(1){
    printf("-----MENU-----\n");
    printf("1. Push\n");
    printf("2. Pop\n");
    printf("3. Peek\n");
    printf("4. Display\n");
    printf("5. Exit\n");
    printf("Enter choice: ");
    scanf("%d",&choice);
    switch(choice){
        case 1:
        printf("Enter element to insert: ");
        scanf("%d",&val);
        push(val);
        break;

        case 2:
        pop();
        break;

        case 3:
        peek();
        break;

        case 4:
        display();
        break;

        case 5:
        exit(0);
        break;
    }
    }
}
